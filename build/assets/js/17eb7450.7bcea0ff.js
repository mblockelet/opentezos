"use strict";(self.webpackChunkopentezos=self.webpackChunkopentezos||[]).push([[7035],{3905:function(t,e,n){n.d(e,{Zo:function(){return l},kt:function(){return d}});var a=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,a,o=function(t,e){if(null==t)return{};var n,a,o={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var p=a.createContext({}),c=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},l=function(t){var e=c(t.components);return a.createElement(p.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},u=a.forwardRef((function(t,e){var n=t.components,o=t.mdxType,r=t.originalType,p=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),u=c(n),d=o,h=u["".concat(p,".").concat(d)]||u[d]||m[d]||r;return n?a.createElement(h,i(i({ref:e},l),{},{components:n})):a.createElement(h,i({ref:e},l))}));function d(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var r=n.length,i=new Array(r);i[0]=u;var s={};for(var p in e)hasOwnProperty.call(e,p)&&(s[p]=e[p]);s.originalType=t,s.mdxType="string"==typeof t?t:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8324:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return l},default:function(){return u}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),i=["components"],s={id:"taquito",disable_pagination:!0,title:"Taquito",authors:"Benjamin Pilia"},p=void 0,c={unversionedId:"dapp/taquito",id:"dapp/taquito",title:"Taquito",description:"Interacting with the Tezos blockchain can be done using to the Tezos CLI. However, it is not suitable for Dapps since it needs to be integrated into web interfaces.",source:"@site/docs/dapp/taquito.md",sourceDirName:"dapp",slug:"/dapp/taquito",permalink:"/dapp/taquito",editUrl:"https://gitlab.com/tezos-paris-hub/opentezos/-/blob/main/docs/dapp/taquito.md",tags:[],version:"current",lastUpdatedBy:"diegovillafuerte1",lastUpdatedAt:1634676698,formattedLastUpdatedAt:"10/19/2021",frontMatter:{id:"taquito",disable_pagination:!0,title:"Taquito",authors:"Benjamin Pilia"},sidebar:"docs",previous:{title:"Deploy with Truffle",permalink:"/dapp/truffle_compilation_migration"},next:{title:"Temple Wallet",permalink:"/dapp/temple"}},l=[{value:"Contract data",id:"contract-data",children:[],level:2},{value:"Activating the account from <em>Taquito</em>",id:"activating-the-account-from-taquito",children:[],level:2},{value:"Sending a transaction",id:"sending-a-transaction",children:[],level:2},{value:"Making a contract call",id:"making-a-contract-call",children:[],level:2},{value:"Sending several transactions",id:"sending-several-transactions",children:[],level:2}],m={toc:l};function u(t){var e=t.components,n=(0,o.Z)(t,i);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Interacting with the Tezos blockchain can be done using to the Tezos CLI. However, it is not suitable for Dapps since it needs to be integrated into web interfaces."),(0,r.kt)("p",null,"Fortunately, the Tezos ecosystem offers libraries in several languages that enable developers to build efficient Dapps. ",(0,r.kt)("em",{parentName:"p"},"Taquito")," is one of these: it is a Typescript library developed and maintained by ",(0,r.kt)("em",{parentName:"p"},"ECAD Labs"),". This library offers developers all of the everyday interactions with the blockchain: retrieving information about a Tezos network, sending a transaction, contract origination and interactions such as calling an entrypoint and fetching the storage, delegation, fetching metadata, etc."),(0,r.kt)("p",null,"All these wallets: (",(0,r.kt)("a",{parentName:"p",href:"https://airgap.it/"},"AirGap"),", ",(0,r.kt)("a",{parentName:"p",href:"https://cryptonomic.tech/galleon.html"},"Galleon"),", ",(0,r.kt)("a",{parentName:"p",href:"https://wallet.kukai.app/"},"Kukai"),", ",(0,r.kt)("a",{parentName:"p",href:"https://spirewallet.com/"},"Spire"),", ",(0,r.kt)("a",{parentName:"p",href:"https://templewallet.com/download/"},"Temple")," ) use the ",(0,r.kt)("em",{parentName:"p"},"Taquito")," librairy to function."),(0,r.kt)("p",null,"A full reference is available ",(0,r.kt)("a",{parentName:"p",href:"https://tezostaquito.io/docs/quick_start"},"here"),"."),(0,r.kt)("p",null,"In this chapter we will use ",(0,r.kt)("em",{parentName:"p"},"Taquito")," to interact with the deployed ",(0,r.kt)("em",{parentName:"p"},"Raffle")," smart contract."),(0,r.kt)("h1",{id:"installation"},"Installation"),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"Taquito")," library is made of several modules:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@taquito/taquito"},"@taquito/taquito"),": High-level functionalities that build upon the other packages in the Tezos Typescript Library Suite."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@taquito/ledger-signer"},"@taquito/ledger-signer"),": Provides ledger signing functionality."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@taquito/rpc"},"@taquito/rpc"),": Provides low-level methods and types to invoke RPC calls from a Nomadic Tezos RPC node."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@taquito/utils"},"@taquito/utils"),": Converts Michelson data and types into convenient JS/TS objects."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@taquito/michelson-encoder"},"@taquito/michelson-encoder"),": Provides a JavaScript abstraction based on a Tezos Smart contracts code, parameters and storage."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@taquito/michel-codec"},"@taquito/michel-codec"),": Michelson parser/validator/formatter."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@taquito/local-forging"},"@taquito/local-forging"),": Provide local forging functionality."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@taquito/signer"},"@taquito/signer"),": Provide signing functionality.")),(0,r.kt)("p",null,"The main module is ",(0,r.kt)("inlineCode",{parentName:"p"},"@taquito/taquito"),", it will be used for most actions. The other modules are used by the ",(0,r.kt)("inlineCode",{parentName:"p"},"@taquito/taquito")," methods as complementary features."),(0,r.kt)("p",null,"Let's initialize a Typescript project and install taquito:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ mkdir taquito-poc\n$ mkdir taquito-poc/src\n$ touch taquito-poc/src/app.ts taquito-poc/main.ts\n$ cd taquito-poc\n$ yarn add @taquito/taquito\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"main.ts")," file will import an ",(0,r.kt)("inlineCode",{parentName:"p"},"App")," class from ",(0,r.kt)("inlineCode",{parentName:"p"},"src/app.ts")," and run its ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { App } from './src/app';\n\nnew App().main();\n\n")),(0,r.kt)("p",null,"Let's create the ",(0,r.kt)("inlineCode",{parentName:"p"},"App")," class with a ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," method. We import the ",(0,r.kt)("inlineCode",{parentName:"p"},"TezosToolkit")," class to check if ",(0,r.kt)("inlineCode",{parentName:"p"},"@taquito/taquito")," is indeed installed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { TezosToolkit } from '@taquito/taquito';\nexport class App {\n\n    public async main() { }\n\n}\n")),(0,r.kt)("p",null,"Let's run it with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ npx ts-node main.ts\n")),(0,r.kt)("p",null,"If ",(0,r.kt)("em",{parentName:"p"},"Taquito")," is correctly installed, this should not raise any exception."),(0,r.kt)("h1",{id:"taquito-configuration"},"Taquito configuration"),(0,r.kt)("p",null,"We first need to configure ",(0,r.kt)("em",{parentName:"p"},"Taquito")," with an RPC URL (to communicate with a Tezos node). To do that we use the ",(0,r.kt)("inlineCode",{parentName:"p"},"TezosToolkit"),': it is the "facade class that surfaces all of the libraries capability and allow its configuration". When created, it accepts an RPC URL. Here, we will use the ',(0,r.kt)("em",{parentName:"p"},"Florence testnet")," RPC URL offered for free by ",(0,r.kt)("em",{parentName:"p"},"smartpy.io")," at ",(0,r.kt)("a",{parentName:"p",href:"https://florencenet.smartpy.io/"},"https://florencenet.smartpy.io/")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/app.ts\nimport { TezosToolkit } from '@taquito/taquito';\nexport class App {\n\n    private tezos: TezosToolkit;\n\n    constructor(rpcUrl: string) {\n        this.tezos = new TezosToolkit(rpcUrl);\n    }\n\n    public async main() { }\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// main.ts\nimport { App } from './src/app';\n\nconst RPC_URL = \"https://florencenet.smartpy.io/\"\n\nnew App(RPC_URL).main();\n")),(0,r.kt)("h1",{id:"interactions-without-an-account"},"Interactions without an account"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Taquito")," is already ready for some actions: it can retrieve all the information about the Tezos network, the accounts, the smart contracts."),(0,r.kt)("p",null,"For instance, let's retrieve the balance of an account, with the ",(0,r.kt)("inlineCode",{parentName:"p"},"getBalance")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/app.ts\nimport { TezosToolkit } from '@taquito/taquito';\nexport class App {\n\n    private tezos: TezosToolkit;\n\n    constructor(rpcUrl: string) {\n        this.tezos = new TezosToolkit(rpcUrl);\n    }\n\n    public getBalance(address: string) : void {\n    this.tezos.rpc\n        .getBalance(address)\n        .then(balance => console.log(balance))\n        .catch(e => console.log('Address not found'));\n    }\n\n    public async main() { }\n")),(0,r.kt)("p",null,"Every interaction with the Tezos network through ",(0,r.kt)("em",{parentName:"p"},"Taquito"),"  is handled via a Javascript ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"."),(0,r.kt)("p",null,"Let's call this method for the address: ",(0,r.kt)("inlineCode",{parentName:"p"},"tz1YWK1gDPQx9N1Jh4JnmVre7xN6xhGGM4uC")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// main.ts\nimport { App } from \'./src/app\';\n\nconst RPC_URL = "https://florencenet.smartpy.io/"\nconst ACCOUNT_TO_CHECK = "tz1YWK1gDPQx9N1Jh4JnmVre7xN6xhGGM4uC"\n\nnew App(RPC_URL).getBalance(ACCOUNT_TO_CHECK);\n\n')),(0,r.kt)("p",null,"Let's run it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ npx ts-node main.ts \nBigNumber { s: 1, e: 10, c: [ 53152138122 ] }\n")),(0,r.kt)("h2",{id:"contract-data"},"Contract data"),(0,r.kt)("p",null,"We can also retrieve the metadata and storage of a contract."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/app.ts\nimport { TezosToolkit } from '@taquito/taquito';\nexport class App {\n\n    private tezos: TezosToolkit;\n\n    constructor(rpcUrl: string) {\n        this.tezos = new TezosToolkit(rpcUrl);\n    }\n\n    public getBalance(address: string) : void {\n    this.tezos.rpc\n        .getBalance(address)\n        .then(balance => console.log(balance))\n        .catch(e => console.log('Address not found'));\n    }\n\n\n    public getContractEntrypoints(address: string) {\n        this.tezos.contract\n            .at(address)\n            .then((c) => {\n                let methods = c.parameterSchema.ExtractSignatures();\n                console.log(JSON.stringify(methods, null, 2));\n            })\n            .catch((error) => console.log(`Error: ${error}`));\n    }\n\n    public async main() { }\n")),(0,r.kt)("p",null,"Let's run it for the simple ",(0,r.kt)("inlineCode",{parentName:"p"},"Counter")," contract on ",(0,r.kt)("em",{parentName:"p"},"Florencenet"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { App } from \'./src/app\';\n\nconst RPC_URL = "https://florencenet.smartpy.io/"\nconst ACCOUNT_TO_CHECK = "tz1YWK1gDPQx9N1Jh4JnmVre7xN6xhGGM4uC"\nconst COUNTER_CONTRACT = "KT1BEMULAGQ58C5NNdWQM3WYLjUtwgJ8X8aN"\n\nnew App(RPC_URL).getContractEntrypoints(COUNTER_CONTRACT);\n')),(0,r.kt)("p",null,"The output is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'$ npx ts-node main.ts \n[\n  [\n    "decrement",\n    "int"\n  ],\n  [\n    "increment",\n    "int"\n  ]\n]\n')),(0,r.kt)("h1",{id:"interactions-with-an-account"},"Interactions with an account"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Taquito")," can also sign and send transactions, but it needs a private key to do that. Let's retrieve a faucet file from ",(0,r.kt)("a",{parentName:"p",href:"https://faucet.tzalpha.net/"}," faucet.tzalpha.net/")," and put it in the project directory."),(0,r.kt)("h2",{id:"activating-the-account-from-taquito"},"Activating the account from ",(0,r.kt)("em",{parentName:"h2"},"Taquito")),(0,r.kt)("p",null,"Every implicit address must be activated on a public network. Let's activate ours on ",(0,r.kt)("em",{parentName:"p"},"Florencenet"),"."),(0,r.kt)("p",null,"First, we need to install the ",(0,r.kt)("inlineCode",{parentName:"p"},"@taquito/signer")," module, used to sign the transactions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ yarn add @taquito/signer\n")),(0,r.kt)("p",null,"We will use the ",(0,r.kt)("inlineCode",{parentName:"p"},"InMemorySigner"),": it loads a private key in memory and uses it to sign transactions."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Storing private keys in memory is suitable for development workflows but risky for production use-cases! Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"InMemorySigner")," appropriately given your risk profile.")),(0,r.kt)("p",null,"You can find a complete reference ",(0,r.kt)("a",{parentName:"p",href:"https://tezostaquito.io/docs/inmemory_signer"},"here"),", and find more ",(0,r.kt)("em",{parentName:"p"},"signers")," ",(0,r.kt)("a",{parentName:"p",href:"https://tezostaquito.io/docs/tezbridge_signer"},"here")," and ",(0,r.kt)("a",{parentName:"p",href:"https://tezostaquito.io/docs/ledger_signer"},"here"),"."),(0,r.kt)("p",null,"First, we need to set the signer of our ",(0,r.kt)("em",{parentName:"p"},"TezosToolkit")," using ",(0,r.kt)("inlineCode",{parentName:"p"},"setSignerProvider"),". The signer will load a private key from our faucet using the ",(0,r.kt)("inlineCode",{parentName:"p"},"fromFundraiser")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/app.ts\nimport { TezosToolkit } from '@taquito/taquito';\nimport { InMemorySigner } from '@taquito/signer';\nconst faucet = require('../faucet.json');\nexport class App {\n\n    private tezos: TezosToolkit;\n\n    constructor(rpcUrl: string) {\n        this.rpcUrl = rpcUrl\n        this.tezos = new TezosToolkit(rpcUrl);\n        this.tezos.setSignerProvider(InMemorySigner.fromFundraiser(faucet.email, faucet.password, faucet.mnemonic.join(' ')))\n    }\n\n    public async main() { }\n")),(0,r.kt)("p",null,"We can now create an ",(0,r.kt)("inlineCode",{parentName:"p"},"activateAccount")," method that uses the signer to activate our address."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/app.ts\nimport { TezosToolkit } from '@taquito/taquito';\nimport { InMemorySigner } from '@taquito/signer';\nconst faucet = require('../faucet.json');\nexport class App {\n\n    private tezos: TezosToolkit;\n\n    constructor(rpcUrl: string) {\n        this.rpcUrl = rpcUrl\n        this.tezos = new TezosToolkit(rpcUrl);\n        this.tezos.setSignerProvider(InMemorySigner.fromFundraiser(faucet.email, faucet.password, faucet.mnemonic.join(' ')))\n    }\n\n    public async activateAccount() {\n        const {pkh, secret} = faucet;\n\n        try {\n            const operation = await this.tezos.tz.activate(pkh, secret);\n            await operation.confirmation();\n        } catch (e) {\n            console.log(e)\n        }\n\n    }\n\n    public async main() { }\n")),(0,r.kt)("p",null,"Let's call it from our ",(0,r.kt)("inlineCode",{parentName:"p"},"main.ts")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { App } from \'./src/app\';\n\nconst RPC_URL = "https://florencenet.smartpy.io/"\nconst ACCOUNT_TO_CHECK = "tz1YWK1gDPQx9N1Jh4JnmVre7xN6xhGGM4uC"\nconst COUNTER_CONTRACT = "KT1BEMULAGQ58C5NNdWQM3WYLjUtwgJ8X8aN"\n\nnew App(RPC_URL).activateAccount();\n')),(0,r.kt)("p",null,"You can now see your activated account on an explorer (",(0,r.kt)("a",{parentName:"p",href:"https://florence.tzstats.com/"},"https://florence.tzstats.com/")," for instance)."),(0,r.kt)("h2",{id:"sending-a-transaction"},"Sending a transaction"),(0,r.kt)("p",null,"Now that ",(0,r.kt)("em",{parentName:"p"},"Taquito")," is configured with an activated account, we can send transactions. Let's send some Tez to another address."),(0,r.kt)("p",null,"Transactions can be sent with ",(0,r.kt)("inlineCode",{parentName:"p"},"this.tezos.contract.transfer"),". It returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<TransactionOperation>"),". A ",(0,r.kt)("inlineCode",{parentName:"p"},"TransactionOperation")," contains the information about this transaction. It also has a ",(0,r.kt)("inlineCode",{parentName:"p"},"confirmation")," method. This method can wait for several confirmations on demand."),(0,r.kt)("p",null,"Let's create a ",(0,r.kt)("inlineCode",{parentName:"p"},"sendTz")," method that sends an ",(0,r.kt)("inlineCode",{parentName:"p"},"amount")," of Tez to the recipient ",(0,r.kt)("inlineCode",{parentName:"p"},"address"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/app.ts\nimport { TezosToolkit } from '@taquito/taquito';\nimport { InMemorySigner } from '@taquito/signer';\nconst faucet = require('../faucet.json');\n\nexport class App {\n\n    private tezos: TezosToolkit;\n\n    constructor(rpcUrl: string) {\n        this.rpcUrl = rpcUrl\n        this.tezos = new TezosToolkit(rpcUrl);\n        this.tezos.setSignerProvider(InMemorySigner.fromFundraiser(faucet.email, faucet.password, faucet.mnemonic.join(' ')))\n    }\n\n    public sendTz(address: string, amount: number) {\n\n        console.log(`Transfering ${amount} \ua729 to ${address}...`);\n        this.tezos.contract.transfer({ to: address, amount: amount })\n            .then(op => {\n                console.log(`Waiting for ${op.hash} to be confirmed...`);\n                return op.confirmation(1).then(() => op.hash);\n            })\n            .then(hash => console.log(`${hash}`))\n            .catch(error => console.log(`Error: ${error} ${JSON.stringify(error, null, 2)}`));\n    }\n}\n")),(0,r.kt)("p",null,"Let's call it from our ",(0,r.kt)("inlineCode",{parentName:"p"},"main.ts")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { App } from \'./src/app\';\n\nconst RPC_URL = "https://florencenet.smartpy.io/"\nconst ACCOUNT_TO_CHECK = "tz1YWK1gDPQx9N1Jh4JnmVre7xN6xhGGM4uC"\nconst COUNTER_CONTRACT = "KT1BEMULAGQ58C5NNdWQM3WYLjUtwgJ8X8aN"\nconst RECIPIENT = "tz1WD73bxtb3oeBBTU471Yz5gcy9NMzepfMJ"\nconst AMOUNT = 10\nnew App(RPC_URL).sendTz(RECIPIENT,AMOUNT);\n\n')),(0,r.kt)("p",null,"Let's run it from the console:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ npx ts-node main.ts \nTransfering 10 \ua729 to tz1WD73bxtb3oeBBTU471Yz5gcy9NMzepfMJ...\nWaiting for ooYGXazAECCMTehpfsPWo6JxavJs2a5KYP6a1i6eU5ofATWnHbH to be confirmed...\nooYGXazAECCMTehpfsPWo6JxavJs2a5KYP6a1i6eU5ofATWnHbH\n\n")),(0,r.kt)("p",null,"We can now check the transaction on an explorer: ",(0,r.kt)("a",{parentName:"p",href:"https://florence.tzstats.com/ooYGXazAECCMTehpfsPWo6JxavJs2a5KYP6a1i6eU5ofATWnHbH"},"https://florence.tzstats.com/ooYGXazAECCMTehpfsPWo6JxavJs2a5KYP6a1i6eU5ofATWnHbH")),(0,r.kt)("h2",{id:"making-a-contract-call"},"Making a contract call"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Taquito")," can call smart contracts as well. We will use the ",(0,r.kt)("em",{parentName:"p"},"Counter")," contract. If you need to know what are the available entrypoints, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"getContractEntrypoints")," defined in the ",(0,r.kt)("a",{parentName:"p",href:"##contract-data"},"Contract data subsection"),"."),(0,r.kt)("p",null,"Let's call the ",(0,r.kt)("inlineCode",{parentName:"p"},"increment")," entrypoint. It takes a single ",(0,r.kt)("em",{parentName:"p"},"int")," as input."),(0,r.kt)("p",null,"To do so, we need:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"to get the contract with ",(0,r.kt)("inlineCode",{parentName:"li"},"this.tezos.contract.at(contract)"),". It returns a ",(0,r.kt)("inlineCode",{parentName:"li"},"Promise<ContractAbstraction<ContractProvider>>"),"."),(0,r.kt)("li",{parentName:"ol"},"get the entrypoints. For this ",(0,r.kt)("inlineCode",{parentName:"li"},"ContractAbstraction<ContractProvider>")," has a ",(0,r.kt)("inlineCode",{parentName:"li"},"methods")," property contraining the entrypoints ",(0,r.kt)("inlineCode",{parentName:"li"},"increment")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"decrement"),"."),(0,r.kt)("li",{parentName:"ol"},"get the increment entrypoint with ",(0,r.kt)("inlineCode",{parentName:"li"},"methods.increment(2)")," to increment the counter by ",(0,r.kt)("inlineCode",{parentName:"li"},"2"),"."),(0,r.kt)("li",{parentName:"ol"},"send the contract call and inspect the transaction with ",(0,r.kt)("inlineCode",{parentName:"li"},"contract.methods.increment(i).send()"),"."),(0,r.kt)("li",{parentName:"ol"},"wait for a chosen number of confirmations, let's say ",(0,r.kt)("inlineCode",{parentName:"li"},"3"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { TezosToolkit } from '@taquito/taquito';\nimport { InMemorySigner } from '@taquito/signer';\nconst faucet = require('../faucet.json');\nexport class App {\n\n    private tezos: TezosToolkit;\n\n    constructor(rpcUrl: string) {\n        this.rpcUrl = rpcUrl\n        this.tezos = new TezosToolkit(rpcUrl);\n        this.tezos.setSignerProvider(InMemorySigner.fromFundraiser(faucet.email, faucet.password, faucet.mnemonic.join(' ')))\n    }\n\n\n    public increment(increment: number, contract: string) {\n        this.tezos.contract\n            .at(contract) // step 1\n            .then((contract) => {\n                console.log(`Incrementing storage value by ${increment}...`);\n                return contract.methods.increment(increment).send(); // steps 2, 3 and 4\n            })\n            .then((op) => {\n                console.log(`Awaiting for ${op.hash} to be confirmed...`);\n                return op.confirmation(3).then(() => op.hash); // step 5\n            })\n            .then((hash) => console.log(`Operation injected: https://florence.tzstats.com/${hash}`))\n            .catch((error) => console.log(`Error: ${JSON.stringify(error, null, 2)}`));\n    }\n}\n")),(0,r.kt)("p",null,"Let's call it from our ",(0,r.kt)("inlineCode",{parentName:"p"},"main.ts")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { App } from \'./src/app\';\n\nconst RPC_URL = "https://florencenet.smartpy.io/"\nconst ACCOUNT_TO_CHECK = "tz1YWK1gDPQx9N1Jh4JnmVre7xN6xhGGM4uC"\nconst COUNTER_CONTRACT = "KT1BEMULAGQ58C5NNdWQM3WYLjUtwgJ8X8aN"\nconst RECIPIENT = "tz1WD73bxtb3oeBBTU471Yz5gcy9NMzepfMJ"\nconst AMOUNT = 10\nconst INCREMENT = 5\nnew App(RPC_URL).increment(INCREMENT, COUNTER_CONTRACT);\n\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"send()")," function can take an object with fields as an input, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"amount")," (which defines an amount sent with the contract call), ",(0,r.kt)("inlineCode",{parentName:"p"},"storageLimit"),", etc."),(0,r.kt)("h2",{id:"sending-several-transactions"},"Sending several transactions"),(0,r.kt)("p",null,"Let's consider this Dapp:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/app.ts\nimport { TezosToolkit } from '@taquito/taquito';\nimport { InMemorySigner } from '@taquito/signer';\nconst faucet = require('../faucet.json');\n\nexport class App {\n    private tezos: TezosToolkit;\n\n    constructor(rpcUrl: string) {\n        this.rpcUrl = rpcUrl\n        this.tezos = new TezosToolkit(rpcUrl);\n        this.tezos.setSignerProvider(InMemorySigner.fromFundraiser(faucet.email, faucet.password, faucet.mnemonic.join(' ')))\n    }\n\n    public increment(increment: number, contract: string) {\n        this.tezos.contract\n            .at(contract) // step 1\n            .then((contract) => {\n                console.log(`Incrementing storage value by ${increment}...`);\n                return contract.methods.increment(increment).send(); // steps 2, 3 and 4\n            })\n            .then((op) => {\n                console.log(`Awaiting for ${op.hash} to be confirmed...`);\n                return op.confirmation(3).then(() => op.hash); // step 5\n            })\n            .then((hash) => console.log(`Operation injected: https://florence.tzstats.com/${hash}`))\n            .catch((error) => console.log(`Error: ${JSON.stringify(error, null, 2)}`));\n    }\n\n    public sendTz(address: string, amount: number) {\n        console.log(`Transfering ${amount} \ua729 to ${address}...`);\n        this.tezos.contract.transfer({ to: address, amount: amount })\n            .then(op => {\n                console.log(`Waiting for ${op.hash} to be confirmed...`);\n                return op.confirmation(1).then(() => op.hash);\n            })\n            .then(hash => console.log(`${hash}`))\n            .catch(error => console.log(`Error: ${error} ${JSON.stringify(error, null, 2)}`));\n    }\n}\n")),(0,r.kt)("p",null,"This is basically a concatenation of the ",(0,r.kt)("em",{parentName:"p"},"Counter")," example and the ",(0,r.kt)("em",{parentName:"p"},"Transfer")," example. Now, let's consider a use-case where we need to send these two transactions at the same time (and maybe additional contract calls, originations or transfer transactions). One could be tempted to make those calls one after the other like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { App } from \'./src/app\';\n\nconst RPC_URL = "https://florencenet.smartpy.io/"\nconst ACCOUNT_TO_CHECK = "tz1YWK1gDPQx9N1Jh4JnmVre7xN6xhGGM4uC"\nconst COUNTER_CONTRACT = "KT1BEMULAGQ58C5NNdWQM3WYLjUtwgJ8X8aN"\nconst RECIPIENT = "tz1WD73bxtb3oeBBTU471Yz5gcy9NMzepfMJ"\nconst AMOUNT = 10\nconst INCREMENT = 5\n\nconst app : App = new App(RPC_URL);\napp.increment(INCREMENT, COUNTER_CONTRACT);\napp.sendTz(RECIPIENT, AMOUNT);\n')),(0,r.kt)("p",null,"We basically make a contract call then try to send some funds to an address. Here is the output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'$ npx ts-node main.ts \nTransfering 10 \ua729 to tz1WD73bxtb3oeBBTU471Yz5gcy9NMzepfMJ...\nIncrementing storage value by 5...\nWaiting for opYNFzprpcnTCS2dWP9STdJJ8HUpcMGeJNcczmKnBK1SNpXQeoC to be confirmed...\nError: {\n  "message": "Http error response: (500) [{\\"kind\\":\\"temporary\\",\\"id\\":\\"failure\\",\\"msg\\":\\"Error while applying operation ongme9f4evozEpAAtP3MUeiU79emuc8KGyoaFGYxvPUUFR3TDUA:\\\\nbranch refused (Error:\\\\n                  Counter 334156 already used for contract tz1YWK1gDPQx9N1Jh4JnmVre7xN6xhGGM4uC (expected 334157)\\\\n)\\"}]\\n",\n  "status": 500,\n  "statusText": "Internal Server Error",\n  "body": "[{\\"kind\\":\\"temporary\\",\\"id\\":\\"failure\\",\\"msg\\":\\"Error while applying operation ongme9f4evozEpAAtP3MUeiU79emuc8KGyoaFGYxvPUUFR3TDUA:\\\\nbranch refused (Error:\\\\n                  Counter 334156 already used for contract tz1YWK1gDPQx9N1Jh4JnmVre7xN6xhGGM4uC (expected 334157)\\\\n)\\"}]\\n",\n  "url": "https://florencenet.smartpy.io/injection/operation",\n  "name": "HttpResponse"\n}\nopYNFzprpcnTCS2dWP9STdJJ8HUpcMGeJNcczmKnBK1SNpXQeoC\n')),(0,r.kt)("p",null,"The meaningful part is ",(0,r.kt)("inlineCode",{parentName:"p"},"Counter 334156 already used for contract tz1YWK1gDPQx9N1Jh4JnmVre7xN6xhGGM4uC"),". Each transaction in our Dapp is performed asynchronously: the application makes the contract call to the ",(0,r.kt)("inlineCode",{parentName:"p"},"increment")," entrypoint, but did not wait for the confirmation to made the transfer transaction. The contract call transaction was still in the mempool when the transfer transaction was sent. Thus, it failed. "),(0,r.kt)("p",null,"However, ",(0,r.kt)("em",{parentName:"p"},"Taquito")," offers a ",(0,r.kt)("inlineCode",{parentName:"p"},"batch")," method, which enables Dapps to send several transactions at once."),(0,r.kt)("p",null,"To do so, we need to:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"retrieve the contract that we want to call,"),(0,r.kt)("li",{parentName:"ol"},"call the batch method,"),(0,r.kt)("li",{parentName:"ol"},"use ",(0,r.kt)("inlineCode",{parentName:"li"},"withTransfer")," and/or ",(0,r.kt)("inlineCode",{parentName:"li"},"withContractCall"),","),(0,r.kt)("li",{parentName:"ol"},"send the transactions batch,"),(0,r.kt)("li",{parentName:"ol"},"wait for their confirmation.")),(0,r.kt)("p",null,"Here is an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"    public async sendInBatch(contractAddress: string, recipientAddress : string) {\n        const contract = await this.tezos.contract.at(contractAddress) //step 1\n\n        const batch = this.tezos.contract.batch() // step 2\n            .withTransfer({ to: recipientAddress, amount: 10 }) // step 3\n            .withTransfer({ to: recipientAddress, amount: 100 }) // step 3\n            .withTransfer({ to: recipientAddress, amount: 1000 }) // step 3\n            .withContractCall(contract.methods.increment(10)) // step 3\n\n        const batchOp = await batch.send(); // step 4\n\n        await batchOp.confirmation(); // step 5\n    }\n\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://florence.tzstats.com/opNz4g3XTd9oAAyPe4jMiEqXLQ67EfPPTZkXhhvXje8DoMg5D5u/2402084"},"Here is its output on TzStats.")),(0,r.kt)("p",null,"Our three transfer transactions and our contract call are now indeed batched together in an operation."),(0,r.kt)("h1",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Taquito")," facilitates developers' interactions with the Tezos network. It can read data from a blockchain, send transactions, originate a contract, etc."),(0,r.kt)("p",null,"However, Dapps require the ability to manage keys. In our example, there was only a single key to manage. In production Dapps, each user will want to use a key that they own. That is where ",(0,r.kt)("em",{parentName:"p"},"wallets")," come into play. Most Tezos wallets are built upon ",(0,r.kt)("em",{parentName:"p"},"Taquito")," and make Dapps more user-friendly and accessible. Let's take a deeper look at wallets in the next chapter."))}u.isMDXComponent=!0}}]);