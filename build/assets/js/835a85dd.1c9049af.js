"use strict";(self.webpackChunkopentezos=self.webpackChunkopentezos||[]).push([[8434],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return k}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(t),k=a,h=d["".concat(l,".").concat(k)]||d[k]||p[k]||o;return t?r.createElement(h,i(i({ref:n},u),{},{components:t})):r.createElement(h,i({ref:n},u))}));function k(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},218:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],c={id:"using-blockchain",title:"Using the blockchain",authors:"Maxime Sallerin"},l=void 0,s={unversionedId:"private/using-blockchain",id:"private/using-blockchain",title:"Using the blockchain",description:"Checking status",source:"@site/docs/private/using-blockchain.md",sourceDirName:"private",slug:"/private/using-blockchain",permalink:"/private/using-blockchain",editUrl:"https://gitlab.com/tezos-paris-hub/opentezos/-/blob/main/docs/private/using-blockchain.md",tags:[],version:"current",lastUpdatedBy:"Aymeric",lastUpdatedAt:1627830816,formattedLastUpdatedAt:"8/1/2021",frontMatter:{id:"using-blockchain",title:"Using the blockchain",authors:"Maxime Sallerin"},sidebar:"docs",previous:{title:"Starting the blockchain",permalink:"/private/starting-blockchain"},next:{title:"VPN Configuration",permalink:"/private/vpn"}},u=[{value:"Checking status",id:"checking-status",children:[],level:2},{value:"Transferring tokens",id:"transferring-tokens",children:[{value:"Importing a faucet account",id:"importing-a-faucet-account",children:[],level:3},{value:"Generate new account",id:"generate-new-account",children:[],level:3},{value:"Conclusion",id:"conclusion",children:[],level:3}],level:2}],p={toc:u};function d(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"checking-status"},"Checking status"),(0,o.kt)("p",null,"Before continuing, you can verify things are working properly by entering into your browser:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"http://<conainer_ip>:8732/chains/main/blocks/head\n")),(0,o.kt)("p",null,"You should see some valid JSON being returned."),(0,o.kt)("p",null,"If not, try: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"http://localhost:8732/chains/main/blocks/head\n")),(0,o.kt)("p",null,"If things are not working correctly, you can look at the contents of the docker file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"base-dir/baker.log\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Reminder: If you want to browse the file system inside your Docker container, you can run the command: ",(0,o.kt)("inlineCode",{parentName:"p"},"docker exec -it <container_name> bash"),".")),(0,o.kt)("h2",{id:"transferring-tokens"},"Transferring tokens"),(0,o.kt)("p",null,"Once the protocol is activated, you can play with the new chain. For example, you can transfer some tokens from one account to another using ",(0,o.kt)("inlineCode",{parentName:"p"},"tezos-client"),"."),(0,o.kt)("h3",{id:"importing-a-faucet-account"},"Importing a faucet account"),(0,o.kt)("p",null,"We will use the alias 'alice' to refer to the ",(0,o.kt)("inlineCode",{parentName:"p"},"bootstrap_account")," entry with these values:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Hash: tz1akcPmG1Kyz2jXpS4RvVJ8uWr7tsiT9i6A\nPublic Key: edpktezaD1wnUa5pT2pvj1JGHNey18WGhPc9fk9bbppD33KNQ2vH8R\nSecret Key: unencrypted:edsk2vKVH2BNwKrxJrvbRvuHnu4FW17Jrs2Uy2TzR2fxipikTJJ1aG\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker exec <container_name> /base-dir/tezos-client \\\n  --addr <container_ip> --port 8732 \\\n  import secret key alice unencrypted:edpkubXzL1rs3dQAGEdTyevfxLw3pBCTF53CdWKdJJYiBFwC1xZSct\n")),(0,o.kt)("p",null,"Account alice has 4,000,000 of Tez. Check it out with this command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"docker exec <container_name> /base-dir/tezos-client \\\n  --addr <container_ip> --port 8732 \\\n  get balance for alice\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The secret keys used here are unencrypted. This is unsafe in general but useful for the simplicity of the examples. Consider not using them if you care about security (even in a private blockchain without real money).\nIn order to encrypt bakers and genesis secret keys, you can provide an ",(0,o.kt)("inlineCode",{parentName:"p"},"--encrypted")," flag to ",(0,o.kt)("inlineCode",{parentName:"p"},"fetch-binaries.sh")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"start-baker.sh")," scripts.")),(0,o.kt)("h3",{id:"generate-new-account"},"Generate new account"),(0,o.kt)("p",null,"Let's generate a new account named bob:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"docker exec <container_name> /base-dir/tezos-client \\\n  --addr <container_ip> --port 8732 \\\n  gen keys bob\n")),(0,o.kt)("p",null,"You can acces to his address with this command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"docker exec <container_name> /base-dir/tezos-client \\\n  --addr <container_ip> --port 8732 \\\n  show address bob\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"Hash: tz1UQiBLRbiWAUfGjZNUpNWKLvQez95ZXy2K\nPublic Key: edpkvRZrUoDqw7PpZ5wLHeDDjSLx9e1WJt3tGJKWUbXNt4CQz7tzFA\n")),(0,o.kt)("p",null,"Bob has 0 Tez since we just created his account."),(0,o.kt)("p",null,"Now, let's transfer some Tez from alice to bob with this command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"docker exec <container_name> /base-dir/tezos-client \\\n  --addr <container_ip> --port 8732 \\\n  --wait none transfer 100 from alice to bob --burn-cap 0.257\n")),(0,o.kt)("p",null," Finally, you can check that bob has indeed received 100 Tez"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"docker exec <container_name> /base-dir/tezos-client \\\n  --addr <container_ip> --port 8732 \\\n  get balance for bob\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"100 \ua729\n")),(0,o.kt)("h3",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,"To conclude, we have seen how to create a private blockchain by generating a genesis block and bootstrapping at least two bakers. These two bakers will validate the first blocks, allowing the realization of the first transactions of the blockchain."))}d.isMDXComponent=!0}}]);