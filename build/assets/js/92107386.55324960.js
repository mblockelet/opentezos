"use strict";(self.webpackChunkopentezos=self.webpackChunkopentezos||[]).push([[4635],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=p(n),h=r,m=u["".concat(c,".").concat(h)]||u[h]||d[h]||i;return n?a.createElement(m,l(l({ref:t},s),{},{components:n})):a.createElement(m,l({ref:t},s))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8580:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return s},default:function(){return u}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=["components"],o={id:"raffle-contract",title:"Raffle contract",authors:"Benoit Rognier"},c=void 0,p={unversionedId:"archetype/raffle-example/raffle-contract",id:"archetype/raffle-example/raffle-contract",title:"Raffle contract",description:"This section presents the Archetype version of a raffle contract, inspired by the version presented for other languages (Ligo, Smartpy). A raffle is a gambling game, where players buy tickets; a winning ticket is randomly picked and its owner gets the jackpot prize.",source:"@site/docs/archetype/raffle-example/contract.md",sourceDirName:"archetype/raffle-example",slug:"/archetype/raffle-example/raffle-contract",permalink:"/archetype/raffle-example/raffle-contract",editUrl:"https://gitlab.com/tezos-paris-hub/opentezos/-/blob/main/docs/archetype/raffle-example/contract.md",tags:[],version:"current",lastUpdatedBy:"Mathias Hiron",lastUpdatedAt:1644867462,formattedLastUpdatedAt:"2/14/2022",frontMatter:{id:"raffle-contract",title:"Raffle contract",authors:"Benoit Rognier"},sidebar:"docs",previous:{title:"Completium",permalink:"/archetype/completium"},next:{title:"Testing",permalink:"/archetype/raffle-example/unit-test"}},s=[{value:"Picking the winning ticket",id:"picking-the-winning-ticket",children:[],level:2},{value:"Raffle storage",id:"raffle-storage",children:[],level:2},{value:"Entrypoints",id:"entrypoints",children:[{value:"<code>open</code>",id:"open",children:[],level:3},{value:"<code>buy</code>",id:"buy",children:[],level:3},{value:"<code>transfer_jackpot</code>",id:"transfer_jackpot",children:[],level:3}],level:2}],d={toc:s};function u(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This section presents the Archetype version of a ",(0,i.kt)("em",{parentName:"p"},"raffle")," contract, inspired by the version presented for other languages (",(0,i.kt)("a",{parentName:"p",href:"/ligo/write-contract-ligo/1-raffle-contract#raffle-smart-contract"},"Ligo"),", ",(0,i.kt)("a",{parentName:"p",href:"/smartpy/write-contract-smartpy#about-the-raffle-contract"},"Smartpy"),"). A raffle is a gambling game, where players buy tickets; a winning ticket is ",(0,i.kt)("em",{parentName:"p"},"randomly")," picked and its owner gets the jackpot prize."),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/michelson"},"Michelson")," language does ",(0,i.kt)("strong",{parentName:"p"},"not")," provide an instruction to generate a random number. We can't use the current date (value of ",(0,i.kt)("inlineCode",{parentName:"p"},"now"),") as a source of randomness either. Indeed, bakers have some control on this value for the blocks they produce, and could therefore influence the result."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The source code of the raffle contract and the orresponding test scenario are available in this ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.com/completium/archetype-raffle"},"repository"),"."))),(0,i.kt)("h2",{id:"picking-the-winning-ticket"},"Picking the winning ticket"),(0,i.kt)("p",null,"The winning ticket id is obtained as the remainder of the euclidean division of an arbitraly large number, called here the ",(0,i.kt)("em",{parentName:"p"},"raffle key"),", by the number of ticket buyers, called here ",(0,i.kt)("em",{parentName:"p"},"players"),". For example, if the raffle key is 2022, and the number of raffle players is 87, then the winning ticket id is 21 (typically the 21st ticket)."),(0,i.kt)("p",null,"In this version, we let the admin select the ",(0,i.kt)("em",{parentName:"p"},"raffle key"),". This means the admin could cheat, but we will ignore that possibility for now."),(0,i.kt)("p",null,"There are several constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the value of the ",(0,i.kt)("em",{parentName:"li"},"raffle key")," cannot be simply stored in the contract. Indeed, the storage of a contract is publicly available, and anyone could predict the result, and influencing it by changing the total number of tickets. This means a player could keep buying tickets until one of their tickets is the winning one."),(0,i.kt)("li",{parentName:"ul"},"the ",(0,i.kt)("em",{parentName:"li"},"raffle key")," cannot be a secret that only the admin knows, and that they will pass to the contract when it is time to announce the winner. Indeed, the admin could disappear, and no winner would ever be announced.")),(0,i.kt)("p",null,"One solution is to store the raffle key in the contract, but encrypt it using the ",(0,i.kt)("a",{parentName:"p",href:"https://tezos.gitlab.io/alpha/timelock.html?highlight=timelock"},"timelock")," encryption feature of the Michelson ",(0,i.kt)("inlineCode",{parentName:"p"},"chest")," data type."),(0,i.kt)("p",null,"A ",(0,i.kt)("em",{parentName:"p"},"timelocked")," value is encrypted stroungly enough that even the most powerful computer will take more than a certain amount of time to crack it, but weakly enough that given a bit more time, any decent computer will manage to crack it. That is to say that, beyond a certain amount of time, the value may be considered public."),(0,i.kt)("p",null,"This means that if the admin doesn't reveal the value of the ",(0,i.kt)("em",{parentName:"p"},"raffle key")," when expected, someone else could run the necessary computation to unlock it, then reveal it and get a reward for their work, while the winner receives their prize."),(0,i.kt)("h2",{id:"raffle-storage"},"Raffle storage"),(0,i.kt)("p",null,"The contract is parameterized as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"archetype raffle(owner: address, min_duration : duration, jackpot : tez, ticket_price : tez)\n")),(0,i.kt)("p",null,"where:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"owner")," is the address of the contract administrator"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"min_duration")," is the minimum duration of the period during which players can buy a ticket"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"jackpot")," is the prize in tez"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ticket_price")," speaks for itslef")),(0,i.kt)("p",null,"The contract holds:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the timelocked raffle key, initialized to ",(0,i.kt)("inlineCode",{parentName:"li"},"none"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"variable locked_raffle_key : option<chest>  = none\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the date beyond which tickets cannot be bought, initialized to ",(0,i.kt)("inlineCode",{parentName:"li"},"none"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"variable close_date : option<date> = none\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"some information about the raffle, initialized to ",(0,i.kt)("inlineCode",{parentName:"li"},"none"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"variable desc : option<string> = none\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a collection that will contain the addresses of all players:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"asset player {\n  id : address\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a state with 3 possible values:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},"states =\n| Created initial\n| Running\n| Transferred\n")),(0,i.kt)("p",null,"where:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Created")," is the initial state during which tickets cannot be bought yet"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Running")," is the state when the administrator opens the raffle for ticket selling"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Transferred")," is the state when prize has been transferred to the winner")),(0,i.kt)("h2",{id:"entrypoints"},"Entrypoints"),(0,i.kt)("h3",{id:"open"},(0,i.kt)("inlineCode",{parentName:"h3"},"open")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"open"),' entrypoint is called by the contract admin (called "owner"), who provides a deadline, a description, and a chest that contains the encrypted ',(0,i.kt)("em",{parentName:"p"},"raffle key"),"."),(0,i.kt)("p",null,"It requires that:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the minimum duration be respected by the close date"),(0,i.kt)("li",{parentName:"ul"},"the transferred amount of tez be equal to the ",(0,i.kt)("inlineCode",{parentName:"li"},"jackpot")," storage value ")),(0,i.kt)("p",null,"It transitions from ",(0,i.kt)("inlineCode",{parentName:"p"},"Created")," state to ",(0,i.kt)("inlineCode",{parentName:"p"},"Running"),", and sets the raffle parameters."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},'transition open(cd : date, d : string, lrk : chest) {\n  called by owner\n  require {\n    r0 : now + min_duration < cd   otherwise "INVALID_CLOSE_DATE";\n    r1 : transferred = jackpot     otherwise "INVALID_AMOUNT"\n  }\n  from Created to Running\n  with effect {\n    locked_raffle_key := some(lrk);\n    close_date        := some(cd);\n    desc              := some(d);\n  }\n}\n')),(0,i.kt)("h3",{id:"buy"},(0,i.kt)("inlineCode",{parentName:"h3"},"buy")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"buy")," entrypoint may be called by anyone to buy a ticket. It requires that:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the contract be in ",(0,i.kt)("inlineCode",{parentName:"li"},"Running")," state"),(0,i.kt)("li",{parentName:"ul"},"the transferred amount of tez be equal to the ticket price"),(0,i.kt)("li",{parentName:"ul"},"the close date not be reached")),(0,i.kt)("p",null,"It records the caller's address in the ",(0,i.kt)("inlineCode",{parentName:"p"},"player")," collection."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},'entry buy () {\n  state is Running\n  require {\n    r2 : transferred = ticket_price otherwise "INVALID_TICKET_PRICE";\n    r3 : now < opt_get(close_date)  otherwise "RAFFLE_CLOSED"\n  }\n  effect { player.add({ caller }) }\n}\n')),(0,i.kt)("p",null,"Note that the ",(0,i.kt)("inlineCode",{parentName:"p"},"add")," method fails with the error ",(0,i.kt)("inlineCode",{parentName:"p"},'(Pair "KeyExists" "player")')," if the caller has already bought a ticket."),(0,i.kt)("h3",{id:"transfer_jackpot"},(0,i.kt)("inlineCode",{parentName:"h3"},"transfer_jackpot")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"transfer_jackpot")," entry point may be called by anyone with the key to the ",(0,i.kt)("inlineCode",{parentName:"p"},"raffle_key")," chest for the jackpot to be transferred to the winner. It requires that:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the close date has been reached")),(0,i.kt)("p",null,"It also transitions the contract to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Transferred")," state and transfers the ticket amount to the contract's owner."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-archetype"},'transition transfer_jackpot(k : chest_key, time : nat) {\n  require {\n    r4 : now > opt_get(close_date) otherwise "RAFFLE_OPEN";\n  }\n  from Running to Transferred\n  with effect {\n    match open_chest(k, opt_get(locked_raffle_key), time) with\n    | left(unlocked) -> begin\n        var raffle_key = opt_get(unpack<nat>(unlocked));\n        transfer jackpot to player.nth(raffle_key % player.count());\n        transfer (balance - jackpot) to owner;\n        player.clear()\n      end\n    | right(error) -> fail("INVALID_TIMELOCK")\n    end\n  }\n}\n')))}u.isMDXComponent=!0}}]);